// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_map_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

mixin com_autonavi_amap_mapcore_interfaces_IMarkerAction on java_lang_Object {
  

  

  

  @mustCallSuper
  Future<double> getAlpha() {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('getAlpha::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setAlpha(double var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('setAlpha::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<int> getDisplayLevel() {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('getDisplayLevel::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<com_amap_api_maps_model_MarkerOptions> getOptions() {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('getOptions::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> isClickable() {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('isClickable::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> isInfoWindowAutoOverturn() {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('isInfoWindowAutoOverturn::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<bool> isInfoWindowEnable() {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('isInfoWindowEnable::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setInfoWindowEnable(bool var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('setInfoWindowEnable::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setMarkerOptions(com_amap_api_maps_model_MarkerOptions var1) {
    kNativeObjectPool.add(var1);
  
    if (fluttifyLogEnabled) {
      debugPrint('setMarkerOptions::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setAutoOverturnInfoWindow(bool var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('setAutoOverturnInfoWindow::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setClickable(bool var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('setClickable::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setDisplayLevel(int var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('setDisplayLevel::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setFixingPointEnable(bool var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('setFixingPointEnable::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setPositionNotUpdate(com_amap_api_maps_model_LatLng var1) {
    kNativeObjectPool.add(var1);
  
    if (fluttifyLogEnabled) {
      debugPrint('setPositionNotUpdate::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setRotateAngleNotUpdate(double var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('setRotateAngleNotUpdate::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setSnippet(String var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('setSnippet::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> setTitle(String var1) {
  
  
    if (fluttifyLogEnabled) {
      debugPrint('setTitle::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
}
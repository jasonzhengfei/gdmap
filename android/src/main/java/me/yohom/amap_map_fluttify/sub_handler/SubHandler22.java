//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_map_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.amap_map_fluttify.AmapMapFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler22 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("com.amap.api.trace.TraceLocation::getLatitude_batch", (__argsBatch__, __methodResult__) -> {
                List<Double> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    double __result__;
                    try {
                        __result__ = ref.getLatitude();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::setLatitude_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLatitude(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::getLongitude_batch", (__argsBatch__, __methodResult__) -> {
                List<Double> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    double __result__;
                    try {
                        __result__ = ref.getLongitude();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    double jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::setLongitude_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    double var1 = (double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setLongitude(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::getSpeed_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = ref.getSpeed();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::setSpeed_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setSpeed(new Double(var1).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::getBearing_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    float __result__;
                    try {
                        __result__ = ref.getBearing();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::setBearing_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setBearing(new Double(var1).floatValue());
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::getTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    long __result__;
                    try {
                        __result__ = ref.getTime();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::setTime_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    long var1 = (long) (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setTime(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceLocation::copy_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceLocation ref = (com.amap.api.trace.TraceLocation) getHEAP().get(refId);
            
                    // invoke native method
                    com.amap.api.trace.TraceLocation __result__;
                    try {
                        __result__ = ref.copy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.LBSTraceClient::getInstance_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) __args__).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    com.amap.api.trace.LBSTraceClient __result__;
                    try {
                        __result__ = com.amap.api.trace.LBSTraceClient.getInstance(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (__result__ != null) {
                        jsonableResult = System.identityHashCode(__result__);
                        getHEAP().put(jsonableResult, __result__);
                    }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.LBSTraceClient::stopTrace_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.LBSTraceClient ref = (com.amap.api.trace.LBSTraceClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.stopTrace();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.LBSTraceClient::destroy_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.LBSTraceClient ref = (com.amap.api.trace.LBSTraceClient) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.destroy();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::add_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // list arg
                    List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("var1");
                    java.util.List<com.amap.api.maps.model.LatLng> var1 = new ArrayList<>();
                    for (int refId : var1RefIdList) {
                        ((ArrayList<com.amap.api.maps.model.LatLng>) var1).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                    }
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.add((ArrayList) var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::remove_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.remove();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::setProperCamera_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // list arg
                    List<Integer> var1RefIdList = (List<Integer>) ((Map<String, Object>) __args__).get("var1");
                    java.util.List<com.amap.api.maps.model.LatLng> var1 = new ArrayList<>();
                    for (int refId : var1RefIdList) {
                        ((ArrayList<com.amap.api.maps.model.LatLng>) var1).add((com.amap.api.maps.model.LatLng) getHEAP().get(refId));
                    }
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setProperCamera((ArrayList) var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::zoopToSpan_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.zoopToSpan();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::getTraceStatus_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getTraceStatus();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::setTraceStatus_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setTraceStatus(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::getDistance_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getDistance();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::setDistance_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setDistance(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::getWaitTime_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    int __result__;
                    try {
                        __result__ = ref.getWaitTime();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // method
            put("com.amap.api.trace.TraceOverlay::setWaitTime_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) __args__).get("refId");
                    com.amap.api.trace.TraceOverlay ref = (com.amap.api.trace.TraceOverlay) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setWaitTime(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        __methodResult__.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_maploader_ProcessingTile__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_maploader_ProcessingTile__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.autonavi.ae.gmap.maploader.ProcessingTile __obj__ = new com.autonavi.ae.gmap.maploader.ProcessingTile(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_glinterface_MapLabelItem__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_glinterface_MapLabelItem__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.glinterface.MapLabelItem __obj__ = new com.autonavi.ae.gmap.glinterface.MapLabelItem();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglMapAnimationMgr__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_glanimation_AdglMapAnimationMgr__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr __obj__ = new com.autonavi.ae.gmap.glanimation.AdglMapAnimationMgr();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglAnimation2V__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_glanimation_AdglAnimation2V__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.autonavi.ae.gmap.glanimation.AdglAnimation2V __obj__ = new com.autonavi.ae.gmap.glanimation.AdglAnimation2V(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglAnimationContantValues__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_glanimation_AdglAnimationContantValues__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.glanimation.AdglAnimationContantValues __obj__ = new com.autonavi.ae.gmap.glanimation.AdglAnimationContantValues();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglMapAnimFling__int__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_glanimation_AdglMapAnimFling__int__int__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.autonavi.ae.gmap.glanimation.AdglMapAnimFling __obj__ = new com.autonavi.ae.gmap.glanimation.AdglMapAnimFling(var1, var2, var3);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglAnimation1V__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_glanimation_AdglAnimation1V__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.autonavi.ae.gmap.glanimation.AdglAnimation1V __obj__ = new com.autonavi.ae.gmap.glanimation.AdglAnimation1V(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglMapAnimPivotZoom__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_glanimation_AdglMapAnimPivotZoom__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom __obj__ = new com.autonavi.ae.gmap.glanimation.AdglMapAnimPivotZoom(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AbstractAdglAnimationParam1V__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_glanimation_AbstractAdglAnimationParam1V__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V __obj__ = new com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam1V();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AdglMapAnimGroup__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_glanimation_AdglMapAnimGroup__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup __obj__ = new com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_glanimation_AbstractAdglAnimationParam2V__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_glanimation_AbstractAdglAnimationParam2V__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V __obj__ = new com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_style_StyleItem__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_style_StyleItem__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.autonavi.ae.gmap.style.StyleItem __obj__ = new com.autonavi.ae.gmap.style.StyleItem(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_style_StyleElement__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_style_StyleElement__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.style.StyleElement __obj__ = new com.autonavi.ae.gmap.style.StyleElement();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_GLMapEngine_MapViewInitParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_GLMapEngine_MapViewInitParam__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam __obj__ = new com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_gesture_EAMapPlatformGestureInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_gesture_EAMapPlatformGestureInfo__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo __obj__ = new com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_GLMapState__int__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_GLMapState__int__long");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                long var2 = (long) (int) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                com.autonavi.ae.gmap.GLMapState __obj__ = new com.autonavi.ae.gmap.GLMapState(var1, var2);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_GLMapState__long__long", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_GLMapState__long__long");
                }
            
                // args
                // jsonable arg
                long var1 = (long) (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                long var3 = (long) (int) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.autonavi.ae.gmap.GLMapState __obj__ = new com.autonavi.ae.gmap.GLMapState(var1, var3);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLTextureProperty__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_gloverlay_GLTextureProperty__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty __obj__ = new com.autonavi.ae.gmap.gloverlay.GLTextureProperty();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLOverlayBundle_GLAmapFocusHits__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_gloverlay_GLOverlayBundle_GLAmapFocusHits__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits __obj__ = new com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLCrossVector_AVectorCrossAttr__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_gloverlay_GLCrossVector_AVectorCrossAttr__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr __obj__ = new com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLRouteProperty__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_gloverlay_GLRouteProperty__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty __obj__ = new com.autonavi.ae.gmap.gloverlay.GLRouteProperty();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLOverlayTexture__int__int__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_gloverlay_GLOverlayTexture__int__int__int__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) __args__).get("var4");
            
                // create target object
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture __obj__ = new com.autonavi.ae.gmap.gloverlay.GLOverlayTexture(var1, var2, var3, var4);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_gloverlay_GLOverlayTexture__int__int__float__float__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_gloverlay_GLOverlayTexture__int__int__float__float__int__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) __args__).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) __args__).get("var6");
            
                // create target object
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture __obj__ = new com.autonavi.ae.gmap.gloverlay.GLOverlayTexture(var1, var2, new Double(var3).floatValue(), new Double(var4).floatValue(), var5, var6);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_ae_gmap_GLMapEngine_InitParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_ae_gmap_GLMapEngine_InitParam__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.ae.gmap.GLMapEngine.InitParam __obj__ = new com.autonavi.ae.gmap.GLMapEngine.InitParam();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_maploader_AMapLoader_ADataRequestParam__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_maploader_AMapLoader_ADataRequestParam__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam __obj__ = new com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_maploader_NetworkState__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_maploader_NetworkState__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.maploader.NetworkState __obj__ = new com.autonavi.amap.mapcore.maploader.NetworkState();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_maploader_AMapLoader_AMapGridDownloadRequest__android_content_Context__String__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_maploader_AMapLoader_AMapGridDownloadRequest__android_content_Context__String__String");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
                // jsonable arg
                String var2 = (String) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest __obj__ = new com.autonavi.amap.mapcore.maploader.AMapLoader.AMapGridDownloadRequest(var1, var2, var3);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_maploader_AMapLoader__int__com_autonavi_ae_gmap_GLMapEngine__com_autonavi_amap_mapcore_maploader_AMapLoader_ADataRequestParam", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_maploader_AMapLoader__int__com_autonavi_ae_gmap_GLMapEngine__com_autonavi_amap_mapcore_maploader_AMapLoader_ADataRequestParam");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // ref arg
                com.autonavi.ae.gmap.GLMapEngine var2 = (com.autonavi.ae.gmap.GLMapEngine) getHEAP().get((int) ((Map<String, Object>) __args__).get("var2"));
                // ref arg
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam var3 = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get((int) ((Map<String, Object>) __args__).get("var3"));
            
                // create target object
                com.autonavi.amap.mapcore.maploader.AMapLoader __obj__ = new com.autonavi.amap.mapcore.maploader.AMapLoader(var1, var2, var3);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_MapProjection__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_MapProjection__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.MapProjection __obj__ = new com.autonavi.amap.mapcore.MapProjection();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_tools_TextTextureGenerator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_tools_TextTextureGenerator__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.tools.TextTextureGenerator __obj__ = new com.autonavi.amap.mapcore.tools.TextTextureGenerator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_tools_GLFileUtil__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_tools_GLFileUtil__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.tools.GLFileUtil __obj__ = new com.autonavi.amap.mapcore.tools.GLFileUtil();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_tools_GlMapUtil__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_tools_GlMapUtil__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.tools.GlMapUtil __obj__ = new com.autonavi.amap.mapcore.tools.GlMapUtil();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_tools_GLMapStaticValue__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_tools_GLMapStaticValue__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.tools.GLMapStaticValue __obj__ = new com.autonavi.amap.mapcore.tools.GLMapStaticValue();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_tools_GLConvertUtil__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_tools_GLConvertUtil__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.tools.GLConvertUtil __obj__ = new com.autonavi.amap.mapcore.tools.GLConvertUtil();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_MsgProcessor__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_MsgProcessor__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.MsgProcessor __obj__ = new com.autonavi.amap.mapcore.MsgProcessor();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AeUtil_UnZipFileBrake__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AeUtil_UnZipFileBrake__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake __obj__ = new com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AbstractNativeInstance__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AbstractNativeInstance__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AbstractNativeInstance __obj__ = new com.autonavi.amap.mapcore.AbstractNativeInstance();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_LinkInfo__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_LinkInfo__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.LinkInfo __obj__ = new com.autonavi.amap.mapcore.LinkInfo();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AMapNativePolyline__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AMapNativePolyline__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AMapNativePolyline __obj__ = new com.autonavi.amap.mapcore.AMapNativePolyline();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_IPoint__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_IPoint__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.IPoint __obj__ = new com.autonavi.amap.mapcore.IPoint();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_IPoint__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_IPoint__int__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                com.autonavi.amap.mapcore.IPoint __obj__ = new com.autonavi.amap.mapcore.IPoint(var1, var2);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_gles_AMapNativeGLShaderManager__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_gles_AMapNativeGLShaderManager__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager __obj__ = new com.autonavi.amap.mapcore.gles.AMapNativeGLShaderManager();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_DPoint__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_DPoint__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.DPoint __obj__ = new com.autonavi.amap.mapcore.DPoint();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_DPoint__double__double", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_DPoint__double__double");
                }
            
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                double var3 = (double) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.autonavi.amap.mapcore.DPoint __obj__ = new com.autonavi.amap.mapcore.DPoint(var1, var3);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AMapNativeRenderer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AMapNativeRenderer__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AMapNativeRenderer __obj__ = new com.autonavi.amap.mapcore.AMapNativeRenderer();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FileUtil__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FileUtil__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.FileUtil __obj__ = new com.autonavi.amap.mapcore.FileUtil();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLTranslateAnimation__com_amap_api_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_animation_GLTranslateAnimation__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation __obj__ = new com.autonavi.amap.mapcore.animation.GLTranslateAnimation(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLRotateAnimation__float__float__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_animation_GLRotateAnimation__float__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                Double var5 = (Double) ((Map<String, Object>) __args__).get("var5");
            
                // create target object
                com.autonavi.amap.mapcore.animation.GLRotateAnimation __obj__ = new com.autonavi.amap.mapcore.animation.GLRotateAnimation(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), new Double(var5).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLAlphaAnimation__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_animation_GLAlphaAnimation__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                com.autonavi.amap.mapcore.animation.GLAlphaAnimation __obj__ = new com.autonavi.amap.mapcore.animation.GLAlphaAnimation(new Double(var1).floatValue(), new Double(var2).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLScaleAnimation__float__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_animation_GLScaleAnimation__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
            
                // create target object
                com.autonavi.amap.mapcore.animation.GLScaleAnimation __obj__ = new com.autonavi.amap.mapcore.animation.GLScaleAnimation(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLTransformation__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_animation_GLTransformation__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.animation.GLTransformation __obj__ = new com.autonavi.amap.mapcore.animation.GLTransformation();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLAnimationSet__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_animation_GLAnimationSet__boolean");
                }
            
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.autonavi.amap.mapcore.animation.GLAnimationSet __obj__ = new com.autonavi.amap.mapcore.animation.GLAnimationSet(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLEmergeAnimation__com_amap_api_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_animation_GLEmergeAnimation__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.autonavi.amap.mapcore.animation.GLEmergeAnimation __obj__ = new com.autonavi.amap.mapcore.animation.GLEmergeAnimation(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_animation_GLAnimation__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_animation_GLAnimation__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.animation.GLAnimation __obj__ = new com.autonavi.amap.mapcore.animation.GLAnimation();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_MapConfig__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_MapConfig__boolean");
                }
            
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.autonavi.amap.mapcore.MapConfig __obj__ = new com.autonavi.amap.mapcore.MapConfig(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_message_HoverGestureMapMessage__int__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_message_HoverGestureMapMessage__int__float");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                com.autonavi.amap.mapcore.message.HoverGestureMapMessage __obj__ = new com.autonavi.amap.mapcore.message.HoverGestureMapMessage(var1, new Double(var2).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_message_MoveGestureMapMessage__int__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_message_MoveGestureMapMessage__int__float__float");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.autonavi.amap.mapcore.message.MoveGestureMapMessage __obj__ = new com.autonavi.amap.mapcore.message.MoveGestureMapMessage(var1, new Double(var2).floatValue(), new Double(var3).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_message_ScaleGestureMapMessage__int__float__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_message_ScaleGestureMapMessage__int__float__int__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) __args__).get("var4");
            
                // create target object
                com.autonavi.amap.mapcore.message.ScaleGestureMapMessage __obj__ = new com.autonavi.amap.mapcore.message.ScaleGestureMapMessage(var1, new Double(var2).floatValue(), var3, var4);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_message_RotateGestureMapMessage__int__float__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_message_RotateGestureMapMessage__int__float__int__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) __args__).get("var4");
            
                // create target object
                com.autonavi.amap.mapcore.message.RotateGestureMapMessage __obj__ = new com.autonavi.amap.mapcore.message.RotateGestureMapMessage(var1, new Double(var2).floatValue(), var3, var4);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPointBounds__com_autonavi_amap_mapcore_FPoint__com_autonavi_amap_mapcore_FPoint", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPointBounds__com_autonavi_amap_mapcore_FPoint__com_autonavi_amap_mapcore_FPoint");
                }
            
                // args
                // ref arg
                com.autonavi.amap.mapcore.FPoint var1 = (com.autonavi.amap.mapcore.FPoint) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
                // ref arg
                com.autonavi.amap.mapcore.FPoint var2 = (com.autonavi.amap.mapcore.FPoint) getHEAP().get((int) ((Map<String, Object>) __args__).get("var2"));
            
                // create target object
                com.autonavi.amap.mapcore.FPointBounds __obj__ = new com.autonavi.amap.mapcore.FPointBounds(var1, var2);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_CoordUtil__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_CoordUtil__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.CoordUtil __obj__ = new com.autonavi.amap.mapcore.CoordUtil();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AeUtil__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AeUtil__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AeUtil __obj__ = new com.autonavi.amap.mapcore.AeUtil();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_VirtualEarthProjection__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_VirtualEarthProjection__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.VirtualEarthProjection __obj__ = new com.autonavi.amap.mapcore.VirtualEarthProjection();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Rectangle__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Rectangle__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.Rectangle __obj__ = new com.autonavi.amap.mapcore.Rectangle();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Rectangle__float__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Rectangle__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
            
                // create target object
                com.autonavi.amap.mapcore.Rectangle __obj__ = new com.autonavi.amap.mapcore.Rectangle(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Inner_3dMap_location__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Inner_3dMap_location__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.autonavi.amap.mapcore.Inner_3dMap_location __obj__ = new com.autonavi.amap.mapcore.Inner_3dMap_location(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Inner_3dMap_location__android_location_Location", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Inner_3dMap_location__android_location_Location");
                }
            
                // args
                // ref arg
                android.location.Location var1 = (android.location.Location) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.autonavi.amap.mapcore.Inner_3dMap_location __obj__ = new com.autonavi.amap.mapcore.Inner_3dMap_location(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AMapEngineUtils__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AMapEngineUtils__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AMapEngineUtils __obj__ = new com.autonavi.amap.mapcore.AMapEngineUtils();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPoint3__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPoint3__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.FPoint3 __obj__ = new com.autonavi.amap.mapcore.FPoint3();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPoint3__float__float__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPoint3__float__float__int");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.autonavi.amap.mapcore.FPoint3 __obj__ = new com.autonavi.amap.mapcore.FPoint3(new Double(var1).floatValue(), new Double(var2).floatValue(), var3);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AMapEtaDecoder__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AMapEtaDecoder__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AMapEtaDecoder __obj__ = new com.autonavi.amap.mapcore.AMapEtaDecoder();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPointBounds_Builder__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPointBounds_Builder__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.FPointBounds.Builder __obj__ = new com.autonavi.amap.mapcore.FPointBounds.Builder();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Inner_3dMap_locationOption__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Inner_3dMap_locationOption__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.Inner_3dMap_locationOption __obj__ = new com.autonavi.amap.mapcore.Inner_3dMap_locationOption();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPoint__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPoint__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.FPoint __obj__ = new com.autonavi.amap.mapcore.FPoint();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_FPoint__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_FPoint__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                com.autonavi.amap.mapcore.FPoint __obj__ = new com.autonavi.amap.mapcore.FPoint(new Double(var1).floatValue(), new Double(var2).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AMapNativeParticleSystem__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AMapNativeParticleSystem__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AMapNativeParticleSystem __obj__ = new com.autonavi.amap.mapcore.AMapNativeParticleSystem();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_AMapNativeBuildingRenderer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_AMapNativeBuildingRenderer__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.AMapNativeBuildingRenderer __obj__ = new com.autonavi.amap.mapcore.AMapNativeBuildingRenderer();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_autonavi_amap_mapcore_Convert__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_autonavi_amap_mapcore_Convert__");
                }
            
                // args
            
            
                // create target object
                com.autonavi.amap.mapcore.Convert __obj__ = new com.autonavi.amap.mapcore.Convert();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_offlineservice_AMapPermissionActivity__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_offlineservice_AMapPermissionActivity__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.offlineservice.AMapPermissionActivity __obj__ = new com.amap.api.offlineservice.AMapPermissionActivity();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_SwipeDismissTouchListener__android_view_View__java_lang_Object__com_amap_api_maps_SwipeDismissTouchListener_DismissCallbacks", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_SwipeDismissTouchListener__android_view_View__java_lang_Object__com_amap_api_maps_SwipeDismissTouchListener_DismissCallbacks");
                }
            
                // args
                // ref arg
                android.view.View var1 = (android.view.View) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
                // jsonable arg
                java.lang.Object var2 = (java.lang.Object) ((Map<String, Object>) __args__).get("var2");
                // ref arg
                com.amap.api.maps.SwipeDismissTouchListener.DismissCallbacks var3 = (com.amap.api.maps.SwipeDismissTouchListener.DismissCallbacks) getHEAP().get((int) ((Map<String, Object>) __args__).get("var3"));
            
                // create target object
                com.amap.api.maps.SwipeDismissTouchListener __obj__ = new com.amap.api.maps.SwipeDismissTouchListener(var1, var2, var3);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_InfoWindowParams__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_InfoWindowParams__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.InfoWindowParams __obj__ = new com.amap.api.maps.InfoWindowParams();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_CameraUpdateFactory__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_CameraUpdateFactory__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.CameraUpdateFactory __obj__ = new com.amap.api.maps.CameraUpdateFactory();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_AMapException__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_AMapException__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.amap.api.maps.AMapException __obj__ = new com.amap.api.maps.AMapException(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_AMapException__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_AMapException__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.AMapException __obj__ = new com.amap.api.maps.AMapException();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_AMapOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_AMapOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.AMapOptions __obj__ = new com.amap.api.maps.AMapOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_AMapOptionsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_AMapOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.AMapOptionsCreator __obj__ = new com.amap.api.maps.AMapOptionsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_CoordinateConverter__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_CoordinateConverter__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.amap.api.maps.CoordinateConverter __obj__ = new com.amap.api.maps.CoordinateConverter(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_utils_SpatialRelationUtil__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_utils_SpatialRelationUtil__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.utils.SpatialRelationUtil __obj__ = new com.amap.api.maps.utils.SpatialRelationUtil();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_utils_overlay_MovingPointOverlay__com_amap_api_maps_AMap__com_amap_api_maps_model_BasePointOverlay", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_utils_overlay_MovingPointOverlay__com_amap_api_maps_AMap__com_amap_api_maps_model_BasePointOverlay");
                }
            
                // args
                // ref arg
                com.amap.api.maps.AMap var1 = (com.amap.api.maps.AMap) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
                // ref arg
                com.amap.api.maps.model.BasePointOverlay var2 = (com.amap.api.maps.model.BasePointOverlay) getHEAP().get((int) ((Map<String, Object>) __args__).get("var2"));
            
                // create target object
                com.amap.api.maps.utils.overlay.MovingPointOverlay __obj__ = new com.amap.api.maps.utils.overlay.MovingPointOverlay(var1, var2);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_utils_overlay_SmoothMoveMarker__com_amap_api_maps_AMap", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_utils_overlay_SmoothMoveMarker__com_amap_api_maps_AMap");
                }
            
                // args
                // ref arg
                com.amap.api.maps.AMap var1 = (com.amap.api.maps.AMap) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.amap.api.maps.utils.overlay.SmoothMoveMarker __obj__ = new com.amap.api.maps.utils.overlay.SmoothMoveMarker(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_SwipeDismissCallBack__com_amap_api_maps_SwipeDismissView", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_SwipeDismissCallBack__com_amap_api_maps_SwipeDismissView");
                }
            
                // args
                // ref arg
                com.amap.api.maps.SwipeDismissView var1 = (com.amap.api.maps.SwipeDismissView) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.amap.api.maps.SwipeDismissCallBack __obj__ = new com.amap.api.maps.SwipeDismissCallBack(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_SwipeDismissView__android_content_Context__android_view_View", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_SwipeDismissView__android_content_Context__android_view_View");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
                // ref arg
                android.view.View var2 = (android.view.View) getHEAP().get((int) ((Map<String, Object>) __args__).get("var2"));
            
                // create target object
                com.amap.api.maps.SwipeDismissView __obj__ = new com.amap.api.maps.SwipeDismissView(var1, var2);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_MapsInitializer__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_MapsInitializer__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.MapsInitializer __obj__ = new com.amap.api.maps.MapsInitializer();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapStatus__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_OfflineMapStatus__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.OfflineMapStatus __obj__ = new com.amap.api.maps.offlinemap.OfflineMapStatus();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapProvince__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_OfflineMapProvince__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.OfflineMapProvince __obj__ = new com.amap.api.maps.offlinemap.OfflineMapProvince();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_DownloadProgressView__android_content_Context", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_DownloadProgressView__android_content_Context");
                }
            
                // args
                // ref arg
                android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.amap.api.maps.offlinemap.DownloadProgressView __obj__ = new com.amap.api.maps.offlinemap.DownloadProgressView(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_Province__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_Province__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.Province __obj__ = new com.amap.api.maps.offlinemap.Province();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapCity__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_OfflineMapCity__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.OfflineMapCity __obj__ = new com.amap.api.maps.offlinemap.OfflineMapCity();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_OfflineMapActivity__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_OfflineMapActivity__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.OfflineMapActivity __obj__ = new com.amap.api.maps.offlinemap.OfflineMapActivity();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_offlinemap_City__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_offlinemap_City__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.offlinemap.City __obj__ = new com.amap.api.maps.offlinemap.City();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PolygonHoleOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PolygonHoleOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PolygonHoleOptions __obj__ = new com.amap.api.maps.model.PolygonHoleOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TileOverlayOptionsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TileOverlayOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.TileOverlayOptionsCreator __obj__ = new com.amap.api.maps.model.TileOverlayOptionsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_Poi__String__com_amap_api_maps_model_LatLng__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_Poi__String__com_amap_api_maps_model_LatLng__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
                // ref arg
                com.amap.api.maps.model.LatLng var2 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var2"));
                // jsonable arg
                String var3 = (String) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.amap.api.maps.model.Poi __obj__ = new com.amap.api.maps.model.Poi(var1, var2, var3);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MyLocationStyle__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MyLocationStyle__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MyLocationStyle __obj__ = new com.amap.api.maps.model.MyLocationStyle();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_VisibleRegion__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLngBounds", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_VisibleRegion__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLngBounds");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
                // ref arg
                com.amap.api.maps.model.LatLng var2 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var2"));
                // ref arg
                com.amap.api.maps.model.LatLng var3 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var3"));
                // ref arg
                com.amap.api.maps.model.LatLng var4 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var4"));
                // ref arg
                com.amap.api.maps.model.LatLngBounds var5 = (com.amap.api.maps.model.LatLngBounds) getHEAP().get((int) ((Map<String, Object>) __args__).get("var5"));
            
                // create target object
                com.amap.api.maps.model.VisibleRegion __obj__ = new com.amap.api.maps.model.VisibleRegion(var1, var2, var3, var4, var5);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLngCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLngCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.LatLngCreator __obj__ = new com.amap.api.maps.model.LatLngCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CircleHoleOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CircleHoleOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CircleHoleOptions __obj__ = new com.amap.api.maps.model.CircleHoleOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLngBounds_Builder__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLngBounds_Builder__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.LatLngBounds.Builder __obj__ = new com.amap.api.maps.model.LatLngBounds.Builder();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_NavigateArrowOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_NavigateArrowOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.NavigateArrowOptions __obj__ = new com.amap.api.maps.model.NavigateArrowOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_BitmapDescriptorFactory__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_BitmapDescriptorFactory__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.BitmapDescriptorFactory __obj__ = new com.amap.api.maps.model.BitmapDescriptorFactory();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MultiPointOverlayOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MultiPointOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MultiPointOverlayOptions __obj__ = new com.amap.api.maps.model.MultiPointOverlayOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PoiCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PoiCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PoiCreator __obj__ = new com.amap.api.maps.model.PoiCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PolylineOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PolylineOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PolylineOptions __obj__ = new com.amap.api.maps.model.PolylineOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_Tile__int__int__byteArray", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_Tile__int__int__byteArray");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                byte[] var3 = (byte[]) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.amap.api.maps.model.Tile __obj__ = new com.amap.api.maps.model.Tile(var1, var2, var3);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_Gradient__intArray__floatArray", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_Gradient__intArray__floatArray");
                }
            
                // args
                // jsonable arg
                int[] var1 = (int[]) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                float[] var2 = (float[]) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                com.amap.api.maps.model.Gradient __obj__ = new com.amap.api.maps.model.Gradient(var1, var2);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_NaviPara__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_NaviPara__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.NaviPara __obj__ = new com.amap.api.maps.model.NaviPara();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_GroundOverlayOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_GroundOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.GroundOverlayOptions __obj__ = new com.amap.api.maps.model.GroundOverlayOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_GL3DModelOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_GL3DModelOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.GL3DModelOptions __obj__ = new com.amap.api.maps.model.GL3DModelOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MyTrafficStyle__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MyTrafficStyle__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MyTrafficStyle __obj__ = new com.amap.api.maps.model.MyTrafficStyle();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CameraPosition__com_amap_api_maps_model_LatLng__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CameraPosition__com_amap_api_maps_model_LatLng__float__float__float");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
            
                // create target object
                com.amap.api.maps.model.CameraPosition __obj__ = new com.amap.api.maps.model.CameraPosition(var1, new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TextOptionsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TextOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.TextOptionsCreator __obj__ = new com.amap.api.maps.model.TextOptionsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PoiPara__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PoiPara__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PoiPara __obj__ = new com.amap.api.maps.model.PoiPara();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MarkerOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MarkerOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MarkerOptions __obj__ = new com.amap.api.maps.model.MarkerOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_AnimationSet__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_AnimationSet__boolean");
                }
            
                // args
                // jsonable arg
                boolean var1 = (boolean) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.amap.api.maps.model.animation.AnimationSet __obj__ = new com.amap.api.maps.model.animation.AnimationSet(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_RotateAnimation__float__float__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_RotateAnimation__float__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                Double var5 = (Double) ((Map<String, Object>) __args__).get("var5");
            
                // create target object
                com.amap.api.maps.model.animation.RotateAnimation __obj__ = new com.amap.api.maps.model.animation.RotateAnimation(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), new Double(var5).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_RotateAnimation__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_RotateAnimation__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                com.amap.api.maps.model.animation.RotateAnimation __obj__ = new com.amap.api.maps.model.animation.RotateAnimation(new Double(var1).floatValue(), new Double(var2).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_TranslateAnimation__com_amap_api_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_TranslateAnimation__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.amap.api.maps.model.animation.TranslateAnimation __obj__ = new com.amap.api.maps.model.animation.TranslateAnimation(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_EmergeAnimation__com_amap_api_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_EmergeAnimation__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.amap.api.maps.model.animation.EmergeAnimation __obj__ = new com.amap.api.maps.model.animation.EmergeAnimation(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_AlphaAnimation__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_AlphaAnimation__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                com.amap.api.maps.model.animation.AlphaAnimation __obj__ = new com.amap.api.maps.model.animation.AlphaAnimation(new Double(var1).floatValue(), new Double(var2).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_animation_ScaleAnimation__float__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_animation_ScaleAnimation__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
            
                // create target object
                com.amap.api.maps.model.animation.ScaleAnimation __obj__ = new com.amap.api.maps.model.animation.ScaleAnimation(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLngBounds__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLngBounds__com_amap_api_maps_model_LatLng__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
                // ref arg
                com.amap.api.maps.model.LatLng var2 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var2"));
            
                // create target object
                com.amap.api.maps.model.LatLngBounds __obj__ = new com.amap.api.maps.model.LatLngBounds(var1, var2);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CustomMapStyleOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CustomMapStyleOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CustomMapStyleOptions __obj__ = new com.amap.api.maps.model.CustomMapStyleOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_BuildingOverlayOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_BuildingOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.BuildingOverlayOptions __obj__ = new com.amap.api.maps.model.BuildingOverlayOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CrossOverlayOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CrossOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CrossOverlayOptions __obj__ = new com.amap.api.maps.model.CrossOverlayOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_VisibleRegionCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_VisibleRegionCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.VisibleRegionCreator __obj__ = new com.amap.api.maps.model.VisibleRegionCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLng__double__double", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLng__double__double");
                }
            
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                double var3 = (double) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.amap.api.maps.model.LatLng __obj__ = new com.amap.api.maps.model.LatLng(var1, var3);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLng__double__double__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLng__double__double__boolean");
                }
            
                // args
                // jsonable arg
                double var1 = (double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                double var3 = (double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                boolean var5 = (boolean) ((Map<String, Object>) __args__).get("var5");
            
                // create target object
                com.amap.api.maps.model.LatLng __obj__ = new com.amap.api.maps.model.LatLng(var1, var3, var5);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TileProjection__int__int__int__int__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TileProjection__int__int__int__int__int__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                int var3 = (int) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                int var4 = (int) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                int var5 = (int) ((Map<String, Object>) __args__).get("var5");
                // jsonable arg
                int var6 = (int) ((Map<String, Object>) __args__).get("var6");
            
                // create target object
                com.amap.api.maps.model.TileProjection __obj__ = new com.amap.api.maps.model.TileProjection(var1, var2, var3, var4, var5, var6);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_AMapPara__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_AMapPara__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.AMapPara __obj__ = new com.amap.api.maps.model.AMapPara();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CircleOptionsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CircleOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CircleOptionsCreator __obj__ = new com.amap.api.maps.model.CircleOptionsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_AMapCameraInfo__float__float__float__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_AMapCameraInfo__float__float__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                Double var5 = (Double) ((Map<String, Object>) __args__).get("var5");
                // jsonable arg
                Double var6 = (Double) ((Map<String, Object>) __args__).get("var6");
            
                // create target object
                com.amap.api.maps.model.AMapCameraInfo __obj__ = new com.amap.api.maps.model.AMapCameraInfo(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), new Double(var5).floatValue(), new Double(var6).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PolygonOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PolygonOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PolygonOptions __obj__ = new com.amap.api.maps.model.PolygonOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_WeightedLatLng__com_amap_api_maps_model_LatLng__double", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_WeightedLatLng__com_amap_api_maps_model_LatLng__double");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
                // jsonable arg
                double var2 = (double) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                com.amap.api.maps.model.WeightedLatLng __obj__ = new com.amap.api.maps.model.WeightedLatLng(var1, var2);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_WeightedLatLng__com_amap_api_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_WeightedLatLng__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.amap.api.maps.model.WeightedLatLng __obj__ = new com.amap.api.maps.model.WeightedLatLng(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MyLocationStyleCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MyLocationStyleCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MyLocationStyleCreator __obj__ = new com.amap.api.maps.model.MyLocationStyleCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MarkerOptionsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MarkerOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.MarkerOptionsCreator __obj__ = new com.amap.api.maps.model.MarkerOptionsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_MultiPointItem__com_amap_api_maps_model_LatLng", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_MultiPointItem__com_amap_api_maps_model_LatLng");
                }
            
                // args
                // ref arg
                com.amap.api.maps.model.LatLng var1 = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("var1"));
            
                // create target object
                com.amap.api.maps.model.MultiPointItem __obj__ = new com.amap.api.maps.model.MultiPointItem(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_LatLngBoundsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_LatLngBoundsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.LatLngBoundsCreator __obj__ = new com.amap.api.maps.model.LatLngBoundsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_ArcOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_ArcOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.ArcOptions __obj__ = new com.amap.api.maps.model.ArcOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_BitmapDescriptorCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_BitmapDescriptorCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.BitmapDescriptorCreator __obj__ = new com.amap.api.maps.model.BitmapDescriptorCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CircleOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CircleOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CircleOptions __obj__ = new com.amap.api.maps.model.CircleOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_NavigateArrowOptionsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_NavigateArrowOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.NavigateArrowOptionsCreator __obj__ = new com.amap.api.maps.model.NavigateArrowOptionsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_RuntimeRemoteException__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_RuntimeRemoteException__String");
                }
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.amap.api.maps.model.RuntimeRemoteException __obj__ = new com.amap.api.maps.model.RuntimeRemoteException(var1);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_HeatmapTileProvider_Builder__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_HeatmapTileProvider_Builder__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.HeatmapTileProvider.Builder __obj__ = new com.amap.api.maps.model.HeatmapTileProvider.Builder();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_BaseOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_BaseOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.BaseOptions __obj__ = new com.amap.api.maps.model.BaseOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PolylineOptionsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PolylineOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PolylineOptionsCreator __obj__ = new com.amap.api.maps.model.PolylineOptionsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_BaseOverlay__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_BaseOverlay__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.BaseOverlay __obj__ = new com.amap.api.maps.model.BaseOverlay();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TileOverlayOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TileOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.TileOverlayOptions __obj__ = new com.amap.api.maps.model.TileOverlayOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_RoutePara__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_RoutePara__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.RoutePara __obj__ = new com.amap.api.maps.model.RoutePara();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_ArcOptionsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_ArcOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.ArcOptionsCreator __obj__ = new com.amap.api.maps.model.ArcOptionsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_CameraPositionCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_CameraPositionCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.CameraPositionCreator __obj__ = new com.amap.api.maps.model.CameraPositionCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_ParticleOverLifeModule__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_ParticleOverLifeModule__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.particle.ParticleOverLifeModule __obj__ = new com.amap.api.maps.model.particle.ParticleOverLifeModule();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_ConstantRotationOverLife__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_ConstantRotationOverLife__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                com.amap.api.maps.model.particle.ConstantRotationOverLife __obj__ = new com.amap.api.maps.model.particle.ConstantRotationOverLife(new Double(var1).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_SinglePointParticleShape__float__float__float__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_SinglePointParticleShape__float__float__float__boolean");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                boolean var4 = (boolean) ((Map<String, Object>) __args__).get("var4");
            
                // create target object
                com.amap.api.maps.model.particle.SinglePointParticleShape __obj__ = new com.amap.api.maps.model.particle.SinglePointParticleShape(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), var4);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_SinglePointParticleShape__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_SinglePointParticleShape__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.amap.api.maps.model.particle.SinglePointParticleShape __obj__ = new com.amap.api.maps.model.particle.SinglePointParticleShape(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_RandomVelocityBetweenTwoConstants__float__float__float__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_RandomVelocityBetweenTwoConstants__float__float__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                Double var5 = (Double) ((Map<String, Object>) __args__).get("var5");
                // jsonable arg
                Double var6 = (Double) ((Map<String, Object>) __args__).get("var6");
            
                // create target object
                com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants __obj__ = new com.amap.api.maps.model.particle.RandomVelocityBetweenTwoConstants(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), new Double(var5).floatValue(), new Double(var6).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_CurveSizeOverLife__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_CurveSizeOverLife__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
            
                // create target object
                com.amap.api.maps.model.particle.CurveSizeOverLife __obj__ = new com.amap.api.maps.model.particle.CurveSizeOverLife(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_ParticleEmissionModule__int__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_ParticleEmissionModule__int__int");
                }
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                int var2 = (int) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                com.amap.api.maps.model.particle.ParticleEmissionModule __obj__ = new com.amap.api.maps.model.particle.ParticleEmissionModule(var1, var2);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_RectParticleShape__float__float__float__float__boolean", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_RectParticleShape__float__float__float__float__boolean");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                boolean var5 = (boolean) ((Map<String, Object>) __args__).get("var5");
            
                // create target object
                com.amap.api.maps.model.particle.RectParticleShape __obj__ = new com.amap.api.maps.model.particle.RectParticleShape(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), var5);
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_RandomColorBetWeenTwoConstants__float__float__float__float__float__float__float__float", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_RandomColorBetWeenTwoConstants__float__float__float__float__float__float__float__float");
                }
            
                // args
                // jsonable arg
                Double var1 = (Double) ((Map<String, Object>) __args__).get("var1");
                // jsonable arg
                Double var2 = (Double) ((Map<String, Object>) __args__).get("var2");
                // jsonable arg
                Double var3 = (Double) ((Map<String, Object>) __args__).get("var3");
                // jsonable arg
                Double var4 = (Double) ((Map<String, Object>) __args__).get("var4");
                // jsonable arg
                Double var5 = (Double) ((Map<String, Object>) __args__).get("var5");
                // jsonable arg
                Double var6 = (Double) ((Map<String, Object>) __args__).get("var6");
                // jsonable arg
                Double var7 = (Double) ((Map<String, Object>) __args__).get("var7");
                // jsonable arg
                Double var8 = (Double) ((Map<String, Object>) __args__).get("var8");
            
                // create target object
                com.amap.api.maps.model.particle.RandomColorBetWeenTwoConstants __obj__ = new com.amap.api.maps.model.particle.RandomColorBetWeenTwoConstants(new Double(var1).floatValue(), new Double(var2).floatValue(), new Double(var3).floatValue(), new Double(var4).floatValue(), new Double(var5).floatValue(), new Double(var6).floatValue(), new Double(var7).floatValue(), new Double(var8).floatValue());
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_ParticleOverlayOptionsFactory__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_ParticleOverlayOptionsFactory__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.particle.ParticleOverlayOptionsFactory __obj__ = new com.amap.api.maps.model.particle.ParticleOverlayOptionsFactory();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_particle_ParticleOverlayOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_particle_ParticleOverlayOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.particle.ParticleOverlayOptions __obj__ = new com.amap.api.maps.model.particle.ParticleOverlayOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TextOptions__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TextOptions__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.TextOptions __obj__ = new com.amap.api.maps.model.TextOptions();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_PolygonOptionsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_PolygonOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.PolygonOptionsCreator __obj__ = new com.amap.api.maps.model.PolygonOptionsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_TileProjectionCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_TileProjectionCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.TileProjectionCreator __obj__ = new com.amap.api.maps.model.TileProjectionCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
            // factory
            put("ObjectFactory::createcom_amap_api_maps_model_GroundOverlayOptionsCreator__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: com_amap_api_maps_model_GroundOverlayOptionsCreator__");
                }
            
                // args
            
            
                // create target object
                com.amap.api.maps.model.GroundOverlayOptionsCreator __obj__ = new com.amap.api.maps.model.GroundOverlayOptionsCreator();
                getHEAP().put(System.identityHashCode(__obj__), __obj__);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(System.identityHashCode(__obj__));
            });
        }};
    }
}

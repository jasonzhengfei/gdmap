//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.amap_map_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.amap_map_fluttify.AmapMapFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler2 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_paddingBottom_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.paddingBottom;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_mDuration_batch", (__argsBatch__, __methodResult__) -> {
                List<Long> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get((int) __args__.get("refId"));
            
                    long __result__ = ref.mDuration;
            
                    long jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_width_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.width;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::get_height_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.height;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.VisibleRegion::get_nearLeft_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.VisibleRegion ref = (com.amap.api.maps.model.VisibleRegion) getHEAP().get((int) __args__.get("refId"));
            
                    com.amap.api.maps.model.LatLng __result__ = ref.nearLeft;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.VisibleRegion::get_nearRight_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.VisibleRegion ref = (com.amap.api.maps.model.VisibleRegion) getHEAP().get((int) __args__.get("refId"));
            
                    com.amap.api.maps.model.LatLng __result__ = ref.nearRight;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.VisibleRegion::get_farLeft_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.VisibleRegion ref = (com.amap.api.maps.model.VisibleRegion) getHEAP().get((int) __args__.get("refId"));
            
                    com.amap.api.maps.model.LatLng __result__ = ref.farLeft;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.VisibleRegion::get_farRight_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.VisibleRegion ref = (com.amap.api.maps.model.VisibleRegion) getHEAP().get((int) __args__.get("refId"));
            
                    com.amap.api.maps.model.LatLng __result__ = ref.farRight;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.VisibleRegion::get_latLngBounds_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.VisibleRegion ref = (com.amap.api.maps.model.VisibleRegion) getHEAP().get((int) __args__.get("refId"));
            
                    com.amap.api.maps.model.LatLngBounds __result__ = ref.latLngBounds;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.Tile::get_width_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.Tile ref = (com.amap.api.maps.model.Tile) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.width;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.Tile::get_height_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.Tile ref = (com.amap.api.maps.model.Tile) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.height;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.Tile::get_data_batch", (__argsBatch__, __methodResult__) -> {
                List<byte[]> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.Tile ref = (com.amap.api.maps.model.Tile) getHEAP().get((int) __args__.get("refId"));
            
                    byte[] __result__ = ref.data;
            
                    byte[] jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.CameraPosition::get_target_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.CameraPosition ref = (com.amap.api.maps.model.CameraPosition) getHEAP().get((int) __args__.get("refId"));
            
                    com.amap.api.maps.model.LatLng __result__ = ref.target;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.CameraPosition::get_zoom_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.CameraPosition ref = (com.amap.api.maps.model.CameraPosition) getHEAP().get((int) __args__.get("refId"));
            
                    float __result__ = ref.zoom;
            
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.CameraPosition::get_tilt_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.CameraPosition ref = (com.amap.api.maps.model.CameraPosition) getHEAP().get((int) __args__.get("refId"));
            
                    float __result__ = ref.tilt;
            
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.CameraPosition::get_bearing_batch", (__argsBatch__, __methodResult__) -> {
                List<Float> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.CameraPosition ref = (com.amap.api.maps.model.CameraPosition) getHEAP().get((int) __args__.get("refId"));
            
                    float __result__ = ref.bearing;
            
                    float jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.CameraPosition::get_isAbroad_batch", (__argsBatch__, __methodResult__) -> {
                List<Boolean> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.CameraPosition ref = (com.amap.api.maps.model.CameraPosition) getHEAP().get((int) __args__.get("refId"));
            
                    boolean __result__ = ref.isAbroad;
            
                    boolean jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.animation.Animation::get_glAnimation_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.animation.Animation ref = (com.amap.api.maps.model.animation.Animation) getHEAP().get((int) __args__.get("refId"));
            
                    com.autonavi.amap.mapcore.animation.GLAnimation __result__ = ref.glAnimation;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.LatLngBounds::get_southwest_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.LatLngBounds ref = (com.amap.api.maps.model.LatLngBounds) getHEAP().get((int) __args__.get("refId"));
            
                    com.amap.api.maps.model.LatLng __result__ = ref.southwest;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.LatLngBounds::get_northeast_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.LatLngBounds ref = (com.amap.api.maps.model.LatLngBounds) getHEAP().get((int) __args__.get("refId"));
            
                    com.amap.api.maps.model.LatLng __result__ = ref.northeast;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.LatLng::get_latitude_batch", (__argsBatch__, __methodResult__) -> {
                List<Double> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.LatLng ref = (com.amap.api.maps.model.LatLng) getHEAP().get((int) __args__.get("refId"));
            
                    double __result__ = ref.latitude;
            
                    double jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.LatLng::get_longitude_batch", (__argsBatch__, __methodResult__) -> {
                List<Double> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.LatLng ref = (com.amap.api.maps.model.LatLng) getHEAP().get((int) __args__.get("refId"));
            
                    double __result__ = ref.longitude;
            
                    double jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.TileProjection::get_offsetX_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.TileProjection ref = (com.amap.api.maps.model.TileProjection) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.offsetX;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.TileProjection::get_offsetY_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.TileProjection ref = (com.amap.api.maps.model.TileProjection) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.offsetY;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.TileProjection::get_minX_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.TileProjection ref = (com.amap.api.maps.model.TileProjection) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.minX;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.TileProjection::get_maxX_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.TileProjection ref = (com.amap.api.maps.model.TileProjection) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.maxX;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.TileProjection::get_minY_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.TileProjection ref = (com.amap.api.maps.model.TileProjection) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.minY;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.TileProjection::get_maxY_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.TileProjection ref = (com.amap.api.maps.model.TileProjection) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.maxY;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.WeightedLatLng::get_intensity_batch", (__argsBatch__, __methodResult__) -> {
                List<Double> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.WeightedLatLng ref = (com.amap.api.maps.model.WeightedLatLng) getHEAP().get((int) __args__.get("refId"));
            
                    double __result__ = ref.intensity;
            
                    double jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.WeightedLatLng::get_latLng_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.WeightedLatLng ref = (com.amap.api.maps.model.WeightedLatLng) getHEAP().get((int) __args__.get("refId"));
            
                    com.amap.api.maps.model.LatLng __result__ = ref.latLng;
            
                    Integer jsonableResult = null;
            if (__result__ != null) {
                jsonableResult = System.identityHashCode(__result__);
                getHEAP().put(jsonableResult, __result__);
            }
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.particle.SizeOverLife::get_DEFAULT_SIZE_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.particle.SizeOverLife ref = (com.amap.api.maps.model.particle.SizeOverLife) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.DEFAULT_SIZE;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.IndoorBuildingInfo::get_activeFloorName_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.IndoorBuildingInfo ref = (com.amap.api.maps.model.IndoorBuildingInfo) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.activeFloorName;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.IndoorBuildingInfo::get_activeFloorIndex_batch", (__argsBatch__, __methodResult__) -> {
                List<Integer> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.IndoorBuildingInfo ref = (com.amap.api.maps.model.IndoorBuildingInfo) getHEAP().get((int) __args__.get("refId"));
            
                    int __result__ = ref.activeFloorIndex;
            
                    int jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.IndoorBuildingInfo::get_poiid_batch", (__argsBatch__, __methodResult__) -> {
                List<String> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.IndoorBuildingInfo ref = (com.amap.api.maps.model.IndoorBuildingInfo) getHEAP().get((int) __args__.get("refId"));
            
                    String __result__ = ref.poiid;
            
                    String jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.IndoorBuildingInfo::get_floor_indexs_batch", (__argsBatch__, __methodResult__) -> {
                List<int[]> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.IndoorBuildingInfo ref = (com.amap.api.maps.model.IndoorBuildingInfo) getHEAP().get((int) __args__.get("refId"));
            
                    int[] __result__ = ref.floor_indexs;
            
                    int[] jsonableResult = __result__;
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // getter
            put("com.amap.api.maps.model.IndoorBuildingInfo::get_floor_names_batch", (__argsBatch__, __methodResult__) -> {
                List<List<String>> __resultList__ = new ArrayList<>();
            
                for (int __i__ = 0; __i__ < ((List<Map<String, Object>>) __argsBatch__).size(); __i__++) {
                    Map<String, Object> __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
            
                    // ref object
                    com.amap.api.maps.model.IndoorBuildingInfo ref = (com.amap.api.maps.model.IndoorBuildingInfo) getHEAP().get((int) __args__.get("refId"));
            
                    String[] __result__ = ref.floor_names;
            
                    List<String> jsonableResult = new ArrayList<String>(java.util.Arrays.asList(__result__));
            
                    __resultList__.add(jsonableResult);
                }
            
                __methodResult__.success(__resultList__);
            });
            // setter
            put("com.autonavi.ae.gmap.maploader.ProcessingTile::set_mKeyName", (__args__, __methodResult__) -> {
                // jsonable arg
                String mKeyName = (String) ((Map<String, Object>) __args__).get("mKeyName");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.maploader.ProcessingTile ref = (com.autonavi.ae.gmap.maploader.ProcessingTile) getHEAP().get(refId);
            
                ref.mKeyName = mKeyName;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.maploader.ProcessingTile::set_mCreateTime", (__args__, __methodResult__) -> {
                // jsonable arg
                long mCreateTime = (long) (int) ((Map<String, Object>) __args__).get("mCreateTime");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.maploader.ProcessingTile ref = (com.autonavi.ae.gmap.maploader.ProcessingTile) getHEAP().get(refId);
            
                ref.mCreateTime = mCreateTime;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_name", (__args__, __methodResult__) -> {
                // jsonable arg
                String name = (String) ((Map<String, Object>) __args__).get("name");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.name = name;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_poiid", (__args__, __methodResult__) -> {
                // jsonable arg
                String poiid = (String) ((Map<String, Object>) __args__).get("poiid");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.poiid = poiid;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_x", (__args__, __methodResult__) -> {
                // jsonable arg
                int x = (int) ((Map<String, Object>) __args__).get("x");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.x = x;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_y", (__args__, __methodResult__) -> {
                // jsonable arg
                int y = (int) ((Map<String, Object>) __args__).get("y");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.y = y;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_angle", (__args__, __methodResult__) -> {
                // jsonable arg
                int angle = (int) ((Map<String, Object>) __args__).get("angle");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.angle = angle;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_strWidth", (__args__, __methodResult__) -> {
                // jsonable arg
                int strWidth = (int) ((Map<String, Object>) __args__).get("strWidth");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.strWidth = strWidth;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_strHeight", (__args__, __methodResult__) -> {
                // jsonable arg
                int strHeight = (int) ((Map<String, Object>) __args__).get("strHeight");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.strHeight = strHeight;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_iconID", (__args__, __methodResult__) -> {
                // jsonable arg
                int iconID = (int) ((Map<String, Object>) __args__).get("iconID");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.iconID = iconID;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_labelx", (__args__, __methodResult__) -> {
                // jsonable arg
                int labelx = (int) ((Map<String, Object>) __args__).get("labelx");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.labelx = labelx;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_labely", (__args__, __methodResult__) -> {
                // jsonable arg
                int labely = (int) ((Map<String, Object>) __args__).get("labely");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.labely = labely;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_pixel20X", (__args__, __methodResult__) -> {
                // jsonable arg
                int pixel20X = (int) ((Map<String, Object>) __args__).get("pixel20X");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.pixel20X = pixel20X;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_pixel20Y", (__args__, __methodResult__) -> {
                // jsonable arg
                int pixel20Y = (int) ((Map<String, Object>) __args__).get("pixel20Y");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.pixel20Y = pixel20Y;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_pixel20Z", (__args__, __methodResult__) -> {
                // jsonable arg
                int pixel20Z = (int) ((Map<String, Object>) __args__).get("pixel20Z");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.pixel20Z = pixel20Z;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_fontColor", (__args__, __methodResult__) -> {
                // jsonable arg
                int fontColor = (int) ((Map<String, Object>) __args__).get("fontColor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.fontColor = fontColor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_borderColor", (__args__, __methodResult__) -> {
                // jsonable arg
                int borderColor = (int) ((Map<String, Object>) __args__).get("borderColor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.borderColor = borderColor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_type", (__args__, __methodResult__) -> {
                // jsonable arg
                int type = (int) ((Map<String, Object>) __args__).get("type");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.type = type;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_anchor", (__args__, __methodResult__) -> {
                // jsonable arg
                int anchor = (int) ((Map<String, Object>) __args__).get("anchor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.anchor = anchor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_fontSize", (__args__, __methodResult__) -> {
                // jsonable arg
                int fontSize = (int) ((Map<String, Object>) __args__).get("fontSize");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.fontSize = fontSize;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_mSublayerId", (__args__, __methodResult__) -> {
                // jsonable arg
                int mSublayerId = (int) ((Map<String, Object>) __args__).get("mSublayerId");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.mSublayerId = mSublayerId;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_mIsFouces", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean mIsFouces = (boolean) ((Map<String, Object>) __args__).get("mIsFouces");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.mIsFouces = mIsFouces;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glinterface.MapLabelItem::set_timeStamp", (__args__, __methodResult__) -> {
                // jsonable arg
                int timeStamp = (int) ((Map<String, Object>) __args__).get("timeStamp");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glinterface.MapLabelItem ref = (com.autonavi.ae.gmap.glinterface.MapLabelItem) getHEAP().get(refId);
            
                ref.timeStamp = timeStamp;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup::set_needMove", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean needMove = (boolean) ((Map<String, Object>) __args__).get("needMove");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup ref = (com.autonavi.ae.gmap.glanimation.AdglMapAnimGroup) getHEAP().get(refId);
            
                ref.needMove = needMove;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::set_fromXValue", (__args__, __methodResult__) -> {
                // jsonable arg
                double fromXValue = (double) ((Map<String, Object>) __args__).get("fromXValue");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V ref = (com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V) getHEAP().get(refId);
            
                ref.fromXValue = fromXValue;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::set_toXValue", (__args__, __methodResult__) -> {
                // jsonable arg
                double toXValue = (double) ((Map<String, Object>) __args__).get("toXValue");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V ref = (com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V) getHEAP().get(refId);
            
                ref.toXValue = toXValue;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::set_fromYValue", (__args__, __methodResult__) -> {
                // jsonable arg
                double fromYValue = (double) ((Map<String, Object>) __args__).get("fromYValue");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V ref = (com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V) getHEAP().get(refId);
            
                ref.fromYValue = fromYValue;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V::set_toYValue", (__args__, __methodResult__) -> {
                // jsonable arg
                double toYValue = (double) ((Map<String, Object>) __args__).get("toYValue");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V ref = (com.autonavi.ae.gmap.glanimation.AbstractAdglAnimationParam2V) getHEAP().get(refId);
            
                ref.toYValue = toYValue;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.style.StyleItem::set_mainKey", (__args__, __methodResult__) -> {
                // jsonable arg
                int mainKey = (int) ((Map<String, Object>) __args__).get("mainKey");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.style.StyleItem ref = (com.autonavi.ae.gmap.style.StyleItem) getHEAP().get(refId);
            
                ref.mainKey = mainKey;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.style.StyleItem::set_subKey", (__args__, __methodResult__) -> {
                // jsonable arg
                int[] subKey = (int[]) ((Map<String, Object>) __args__).get("subKey");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.style.StyleItem ref = (com.autonavi.ae.gmap.style.StyleItem) getHEAP().get(refId);
            
                ref.subKey = subKey;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.style.StyleElement::set_styleElementType", (__args__, __methodResult__) -> {
                // jsonable arg
                int styleElementType = (int) ((Map<String, Object>) __args__).get("styleElementType");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                ref.styleElementType = styleElementType;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.style.StyleElement::set_value", (__args__, __methodResult__) -> {
                // jsonable arg
                int value = (int) ((Map<String, Object>) __args__).get("value");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                ref.value = value;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.style.StyleElement::set_textureId", (__args__, __methodResult__) -> {
                // jsonable arg
                int textureId = (int) ((Map<String, Object>) __args__).get("textureId");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                ref.textureId = textureId;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.style.StyleElement::set_opacity", (__args__, __methodResult__) -> {
                // jsonable arg
                Double opacity = (Double) ((Map<String, Object>) __args__).get("opacity");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                ref.opacity = new Double(opacity).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.style.StyleElement::set_lineWidth", (__args__, __methodResult__) -> {
                // jsonable arg
                int lineWidth = (int) ((Map<String, Object>) __args__).get("lineWidth");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                ref.lineWidth = lineWidth;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.style.StyleElement::set_visible", (__args__, __methodResult__) -> {
                // jsonable arg
                int visible = (int) ((Map<String, Object>) __args__).get("visible");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.style.StyleElement ref = (com.autonavi.ae.gmap.style.StyleElement) getHEAP().get(refId);
            
                ref.visible = visible;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_engineId", (__args__, __methodResult__) -> {
                // jsonable arg
                int engineId = (int) ((Map<String, Object>) __args__).get("engineId");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                ref.engineId = engineId;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_x", (__args__, __methodResult__) -> {
                // jsonable arg
                int x = (int) ((Map<String, Object>) __args__).get("x");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                ref.x = x;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_y", (__args__, __methodResult__) -> {
                // jsonable arg
                int y = (int) ((Map<String, Object>) __args__).get("y");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                ref.y = y;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_width", (__args__, __methodResult__) -> {
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                ref.width = width;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_height", (__args__, __methodResult__) -> {
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                ref.height = height;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_screenWidth", (__args__, __methodResult__) -> {
                // jsonable arg
                int screenWidth = (int) ((Map<String, Object>) __args__).get("screenWidth");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                ref.screenWidth = screenWidth;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_screenHeight", (__args__, __methodResult__) -> {
                // jsonable arg
                int screenHeight = (int) ((Map<String, Object>) __args__).get("screenHeight");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                ref.screenHeight = screenHeight;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_screenScale", (__args__, __methodResult__) -> {
                // jsonable arg
                Double screenScale = (Double) ((Map<String, Object>) __args__).get("screenScale");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                ref.screenScale = new Double(screenScale).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_textScale", (__args__, __methodResult__) -> {
                // jsonable arg
                Double textScale = (Double) ((Map<String, Object>) __args__).get("textScale");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                ref.textScale = new Double(textScale).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam::set_mapZoomScale", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mapZoomScale = (Double) ((Map<String, Object>) __args__).get("mapZoomScale");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam ref = (com.autonavi.ae.gmap.GLMapEngine.MapViewInitParam) getHEAP().get(refId);
            
                ref.mapZoomScale = new Double(mapZoomScale).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mGestureState", (__args__, __methodResult__) -> {
                // jsonable arg
                int mGestureState = (int) ((Map<String, Object>) __args__).get("mGestureState");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                ref.mGestureState = mGestureState;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mGestureType", (__args__, __methodResult__) -> {
                // jsonable arg
                int mGestureType = (int) ((Map<String, Object>) __args__).get("mGestureType");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                ref.mGestureType = mGestureType;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mLocation", (__args__, __methodResult__) -> {
                // jsonable arg
                float[] mLocation = (float[]) ((Map<String, Object>) __args__).get("mLocation");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                ref.mLocation = mLocation;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mScale", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mScale = (Double) ((Map<String, Object>) __args__).get("mScale");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                ref.mScale = new Double(mScale).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mRotation", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mRotation = (Double) ((Map<String, Object>) __args__).get("mRotation");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                ref.mRotation = new Double(mRotation).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mVeLocityFloat", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mVeLocityFloat = (Double) ((Map<String, Object>) __args__).get("mVeLocityFloat");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                ref.mVeLocityFloat = new Double(mVeLocityFloat).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo::set_mVelocityPoint", (__args__, __methodResult__) -> {
                // jsonable arg
                float[] mVelocityPoint = (float[]) ((Map<String, Object>) __args__).get("mVelocityPoint");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo ref = (com.autonavi.ae.gmap.gesture.EAMapPlatformGestureInfo) getHEAP().get(refId);
            
                ref.mVelocityPoint = mVelocityPoint;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mId", (__args__, __methodResult__) -> {
                // jsonable arg
                int mId = (int) ((Map<String, Object>) __args__).get("mId");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                ref.mId = mId;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mBitmap", (__args__, __methodResult__) -> {
                // ref arg
                android.graphics.Bitmap mBitmap = (android.graphics.Bitmap) getHEAP().get((int) ((Map<String, Object>) __args__).get("mBitmap"));
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                ref.mBitmap = mBitmap;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mPngBuffer", (__args__, __methodResult__) -> {
                // jsonable arg
                byte[] mPngBuffer = (byte[]) ((Map<String, Object>) __args__).get("mPngBuffer");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                ref.mPngBuffer = mPngBuffer;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mAnchor", (__args__, __methodResult__) -> {
                // jsonable arg
                int mAnchor = (int) ((Map<String, Object>) __args__).get("mAnchor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                ref.mAnchor = mAnchor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mXRatio", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mXRatio = (Double) ((Map<String, Object>) __args__).get("mXRatio");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                ref.mXRatio = new Double(mXRatio).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_mYRatio", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mYRatio = (Double) ((Map<String, Object>) __args__).get("mYRatio");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                ref.mYRatio = new Double(mYRatio).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_isGenMimps", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean isGenMimps = (boolean) ((Map<String, Object>) __args__).get("isGenMimps");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                ref.isGenMimps = isGenMimps;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLTextureProperty::set_isRepeat", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean isRepeat = (boolean) ((Map<String, Object>) __args__).get("isRepeat");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLTextureProperty ref = (com.autonavi.ae.gmap.gloverlay.GLTextureProperty) getHEAP().get(refId);
            
                ref.isRepeat = isRepeat;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::set_mOverlayHashCode", (__args__, __methodResult__) -> {
                // jsonable arg
                long mOverlayHashCode = (long) (int) ((Map<String, Object>) __args__).get("mOverlayHashCode");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits) getHEAP().get(refId);
            
                ref.mOverlayHashCode = mOverlayHashCode;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::set_mHitedIndex", (__args__, __methodResult__) -> {
                // jsonable arg
                long mHitedIndex = (long) (int) ((Map<String, Object>) __args__).get("mHitedIndex");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits) getHEAP().get(refId);
            
                ref.mHitedIndex = mHitedIndex;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits::set_mHitedTimes", (__args__, __methodResult__) -> {
                // jsonable arg
                long mHitedTimes = (long) (int) ((Map<String, Object>) __args__).get("mHitedTimes");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayBundle.GLAmapFocusHits) getHEAP().get(refId);
            
                ref.mHitedTimes = mHitedTimes;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_stAreaColor", (__args__, __methodResult__) -> {
                // jsonable arg
                int stAreaColor = (int) ((Map<String, Object>) __args__).get("stAreaColor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                ref.stAreaColor = stAreaColor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_stArrowBorderColor", (__args__, __methodResult__) -> {
                // jsonable arg
                int stArrowBorderColor = (int) ((Map<String, Object>) __args__).get("stArrowBorderColor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                ref.stArrowBorderColor = stArrowBorderColor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_fArrowBorderWidth", (__args__, __methodResult__) -> {
                // jsonable arg
                int fArrowBorderWidth = (int) ((Map<String, Object>) __args__).get("fArrowBorderWidth");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                ref.fArrowBorderWidth = fArrowBorderWidth;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_fArrowLineWidth", (__args__, __methodResult__) -> {
                // jsonable arg
                int fArrowLineWidth = (int) ((Map<String, Object>) __args__).get("fArrowLineWidth");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                ref.fArrowLineWidth = fArrowLineWidth;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_stArrowLineColor", (__args__, __methodResult__) -> {
                // jsonable arg
                int stArrowLineColor = (int) ((Map<String, Object>) __args__).get("stArrowLineColor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                ref.stArrowLineColor = stArrowLineColor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr::set_dayMode", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean dayMode = (boolean) ((Map<String, Object>) __args__).get("dayMode");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr ref = (com.autonavi.ae.gmap.gloverlay.GLCrossVector.AVectorCrossAttr) getHEAP().get(refId);
            
                ref.dayMode = dayMode;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_euRouteTexture", (__args__, __methodResult__) -> {
                // enum arg
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty.EAMapRouteTexture euRouteTexture = com.autonavi.ae.gmap.gloverlay.GLRouteProperty.EAMapRouteTexture.values()[(int) ((Map<String, Object>) __args__).get("euRouteTexture")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.euRouteTexture = euRouteTexture;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mFilledResId", (__args__, __methodResult__) -> {
                // jsonable arg
                int mFilledResId = (int) ((Map<String, Object>) __args__).get("mFilledResId");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mFilledResId = mFilledResId;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DFillResId", (__args__, __methodResult__) -> {
                // jsonable arg
                int mSimple3DFillResId = (int) ((Map<String, Object>) __args__).get("mSimple3DFillResId");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mSimple3DFillResId = mSimple3DFillResId;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mFilledColor", (__args__, __methodResult__) -> {
                // jsonable arg
                int mFilledColor = (int) ((Map<String, Object>) __args__).get("mFilledColor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mFilledColor = mFilledColor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mBgResId", (__args__, __methodResult__) -> {
                // jsonable arg
                int mBgResId = (int) ((Map<String, Object>) __args__).get("mBgResId");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mBgResId = mBgResId;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mBgColor", (__args__, __methodResult__) -> {
                // jsonable arg
                int mBgColor = (int) ((Map<String, Object>) __args__).get("mBgColor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mBgColor = mBgColor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mLineWidth", (__args__, __methodResult__) -> {
                // jsonable arg
                int mLineWidth = (int) ((Map<String, Object>) __args__).get("mLineWidth");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mLineWidth = mLineWidth;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mBorderLineWidth", (__args__, __methodResult__) -> {
                // jsonable arg
                int mBorderLineWidth = (int) ((Map<String, Object>) __args__).get("mBorderLineWidth");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mBorderLineWidth = mBorderLineWidth;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mX1", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mX1 = (Double) ((Map<String, Object>) __args__).get("mX1");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mX1 = new Double(mX1).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mY1", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mY1 = (Double) ((Map<String, Object>) __args__).get("mY1");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mY1 = new Double(mY1).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mX2", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mX2 = (Double) ((Map<String, Object>) __args__).get("mX2");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mX2 = new Double(mX2).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mY2", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mY2 = (Double) ((Map<String, Object>) __args__).get("mY2");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mY2 = new Double(mY2).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mGLStart", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mGLStart = (Double) ((Map<String, Object>) __args__).get("mGLStart");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mGLStart = new Double(mGLStart).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mTextureLen", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mTextureLen = (Double) ((Map<String, Object>) __args__).get("mTextureLen");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mTextureLen = new Double(mTextureLen).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DX1", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mSimple3DX1 = (Double) ((Map<String, Object>) __args__).get("mSimple3DX1");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mSimple3DX1 = new Double(mSimple3DX1).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DY1", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mSimple3DY1 = (Double) ((Map<String, Object>) __args__).get("mSimple3DY1");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mSimple3DY1 = new Double(mSimple3DY1).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DX2", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mSimple3DX2 = (Double) ((Map<String, Object>) __args__).get("mSimple3DX2");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mSimple3DX2 = new Double(mSimple3DX2).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DY2", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mSimple3DY2 = (Double) ((Map<String, Object>) __args__).get("mSimple3DY2");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mSimple3DY2 = new Double(mSimple3DY2).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DGLStart", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mSimple3DGLStart = (Double) ((Map<String, Object>) __args__).get("mSimple3DGLStart");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mSimple3DGLStart = new Double(mSimple3DGLStart).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mSimple3DTextureLen", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mSimple3DTextureLen = (Double) ((Map<String, Object>) __args__).get("mSimple3DTextureLen");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mSimple3DTextureLen = new Double(mSimple3DTextureLen).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mCapX1", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mCapX1 = (Double) ((Map<String, Object>) __args__).get("mCapX1");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mCapX1 = new Double(mCapX1).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mCapY1", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mCapY1 = (Double) ((Map<String, Object>) __args__).get("mCapY1");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mCapY1 = new Double(mCapY1).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mCapX2", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mCapX2 = (Double) ((Map<String, Object>) __args__).get("mCapX2");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mCapX2 = new Double(mCapX2).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mCapY2", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mCapY2 = (Double) ((Map<String, Object>) __args__).get("mCapY2");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mCapY2 = new Double(mCapY2).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_isLineExtract", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean isLineExtract = (boolean) ((Map<String, Object>) __args__).get("isLineExtract");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.isLineExtract = isLineExtract;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_isCanCovered", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean isCanCovered = (boolean) ((Map<String, Object>) __args__).get("isCanCovered");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.isCanCovered = isCanCovered;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_isUseColor", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean isUseColor = (boolean) ((Map<String, Object>) __args__).get("isUseColor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.isUseColor = isUseColor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_isUseCap", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean isUseCap = (boolean) ((Map<String, Object>) __args__).get("isUseCap");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.isUseCap = isUseCap;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mShowArrow", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean mShowArrow = (boolean) ((Map<String, Object>) __args__).get("mShowArrow");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mShowArrow = mShowArrow;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLRouteProperty::set_mbTexPreMulAlpha", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean mbTexPreMulAlpha = (boolean) ((Map<String, Object>) __args__).get("mbTexPreMulAlpha");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLRouteProperty ref = (com.autonavi.ae.gmap.gloverlay.GLRouteProperty) getHEAP().get(refId);
            
                ref.mbTexPreMulAlpha = mbTexPreMulAlpha;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mResId", (__args__, __methodResult__) -> {
                // jsonable arg
                int mResId = (int) ((Map<String, Object>) __args__).get("mResId");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                ref.mResId = mResId;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mWidth", (__args__, __methodResult__) -> {
                // jsonable arg
                int mWidth = (int) ((Map<String, Object>) __args__).get("mWidth");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                ref.mWidth = mWidth;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mHeight", (__args__, __methodResult__) -> {
                // jsonable arg
                int mHeight = (int) ((Map<String, Object>) __args__).get("mHeight");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                ref.mHeight = mHeight;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mResWidth", (__args__, __methodResult__) -> {
                // jsonable arg
                int mResWidth = (int) ((Map<String, Object>) __args__).get("mResWidth");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                ref.mResWidth = mResWidth;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mResHeight", (__args__, __methodResult__) -> {
                // jsonable arg
                int mResHeight = (int) ((Map<String, Object>) __args__).get("mResHeight");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                ref.mResHeight = mResHeight;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mAnchorXRatio", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mAnchorXRatio = (Double) ((Map<String, Object>) __args__).get("mAnchorXRatio");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                ref.mAnchorXRatio = new Double(mAnchorXRatio).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mAnchorYRatio", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mAnchorYRatio = (Double) ((Map<String, Object>) __args__).get("mAnchorYRatio");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                ref.mAnchorYRatio = new Double(mAnchorYRatio).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.gloverlay.GLOverlayTexture::set_mAnchor", (__args__, __methodResult__) -> {
                // jsonable arg
                int mAnchor = (int) ((Map<String, Object>) __args__).get("mAnchor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.gloverlay.GLOverlayTexture ref = (com.autonavi.ae.gmap.gloverlay.GLOverlayTexture) getHEAP().get(refId);
            
                ref.mAnchor = mAnchor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.InitParam::set_mRootPath", (__args__, __methodResult__) -> {
                // jsonable arg
                String mRootPath = (String) ((Map<String, Object>) __args__).get("mRootPath");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.InitParam ref = (com.autonavi.ae.gmap.GLMapEngine.InitParam) getHEAP().get(refId);
            
                ref.mRootPath = mRootPath;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.InitParam::set_mConfigPath", (__args__, __methodResult__) -> {
                // jsonable arg
                String mConfigPath = (String) ((Map<String, Object>) __args__).get("mConfigPath");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.InitParam ref = (com.autonavi.ae.gmap.GLMapEngine.InitParam) getHEAP().get(refId);
            
                ref.mConfigPath = mConfigPath;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.InitParam::set_mConfigContent", (__args__, __methodResult__) -> {
                // jsonable arg
                String mConfigContent = (String) ((Map<String, Object>) __args__).get("mConfigContent");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.InitParam ref = (com.autonavi.ae.gmap.GLMapEngine.InitParam) getHEAP().get(refId);
            
                ref.mConfigContent = mConfigContent;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.InitParam::set_mOfflineDataPath", (__args__, __methodResult__) -> {
                // jsonable arg
                String mOfflineDataPath = (String) ((Map<String, Object>) __args__).get("mOfflineDataPath");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.InitParam ref = (com.autonavi.ae.gmap.GLMapEngine.InitParam) getHEAP().get(refId);
            
                ref.mOfflineDataPath = mOfflineDataPath;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.ae.gmap.GLMapEngine.InitParam::set_mP3dCrossPath", (__args__, __methodResult__) -> {
                // jsonable arg
                String mP3dCrossPath = (String) ((Map<String, Object>) __args__).get("mP3dCrossPath");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.ae.gmap.GLMapEngine.InitParam ref = (com.autonavi.ae.gmap.GLMapEngine.InitParam) getHEAP().get(refId);
            
                ref.mP3dCrossPath = mP3dCrossPath;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_requestUrl", (__args__, __methodResult__) -> {
                // jsonable arg
                String requestUrl = (String) ((Map<String, Object>) __args__).get("requestUrl");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                ref.requestUrl = requestUrl;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_handler", (__args__, __methodResult__) -> {
                // jsonable arg
                long handler = (long) (int) ((Map<String, Object>) __args__).get("handler");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                ref.handler = handler;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_nRequestType", (__args__, __methodResult__) -> {
                // jsonable arg
                int nRequestType = (int) ((Map<String, Object>) __args__).get("nRequestType");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                ref.nRequestType = nRequestType;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_enCodeString", (__args__, __methodResult__) -> {
                // jsonable arg
                byte[] enCodeString = (byte[]) ((Map<String, Object>) __args__).get("enCodeString");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                ref.enCodeString = enCodeString;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_nCompress", (__args__, __methodResult__) -> {
                // jsonable arg
                int nCompress = (int) ((Map<String, Object>) __args__).get("nCompress");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                ref.nCompress = nCompress;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam::set_requestBaseUrl", (__args__, __methodResult__) -> {
                // jsonable arg
                String requestBaseUrl = (String) ((Map<String, Object>) __args__).get("requestBaseUrl");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam ref = (com.autonavi.amap.mapcore.maploader.AMapLoader.ADataRequestParam) getHEAP().get(refId);
            
                ref.requestBaseUrl = requestBaseUrl;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.maploader.AMapLoader::set_isFinish", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean isFinish = (boolean) ((Map<String, Object>) __args__).get("isFinish");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.maploader.AMapLoader ref = (com.autonavi.amap.mapcore.maploader.AMapLoader) getHEAP().get(refId);
            
                ref.isFinish = isFinish;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake::set_mIsAborted", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean mIsAborted = (boolean) ((Map<String, Object>) __args__).get("mIsAborted");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake ref = (com.autonavi.amap.mapcore.AeUtil.UnZipFileBrake) getHEAP().get(refId);
            
                ref.mIsAborted = mIsAborted;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.DPoint::set_x", (__args__, __methodResult__) -> {
                // jsonable arg
                double x = (double) ((Map<String, Object>) __args__).get("x");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.DPoint ref = (com.autonavi.amap.mapcore.DPoint) getHEAP().get(refId);
            
                ref.x = x;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.DPoint::set_y", (__args__, __methodResult__) -> {
                // jsonable arg
                double y = (double) ((Map<String, Object>) __args__).get("y");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.DPoint ref = (com.autonavi.amap.mapcore.DPoint) getHEAP().get(refId);
            
                ref.y = y;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mFromXDelta", (__args__, __methodResult__) -> {
                // jsonable arg
                double mFromXDelta = (double) ((Map<String, Object>) __args__).get("mFromXDelta");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                ref.mFromXDelta = mFromXDelta;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mFromYDelta", (__args__, __methodResult__) -> {
                // jsonable arg
                double mFromYDelta = (double) ((Map<String, Object>) __args__).get("mFromYDelta");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                ref.mFromYDelta = mFromYDelta;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mToXDelta", (__args__, __methodResult__) -> {
                // jsonable arg
                double mToXDelta = (double) ((Map<String, Object>) __args__).get("mToXDelta");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                ref.mToXDelta = mToXDelta;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mToYDelta", (__args__, __methodResult__) -> {
                // jsonable arg
                double mToYDelta = (double) ((Map<String, Object>) __args__).get("mToYDelta");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                ref.mToYDelta = mToYDelta;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mCurXDelta", (__args__, __methodResult__) -> {
                // jsonable arg
                double mCurXDelta = (double) ((Map<String, Object>) __args__).get("mCurXDelta");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                ref.mCurXDelta = mCurXDelta;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTranslateAnimation::set_mCurYDelta", (__args__, __methodResult__) -> {
                // jsonable arg
                double mCurYDelta = (double) ((Map<String, Object>) __args__).get("mCurYDelta");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTranslateAnimation ref = (com.autonavi.amap.mapcore.animation.GLTranslateAnimation) getHEAP().get(refId);
            
                ref.mCurYDelta = mCurYDelta;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLAlphaAnimation::set_mFromAlpha", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mFromAlpha = (Double) ((Map<String, Object>) __args__).get("mFromAlpha");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLAlphaAnimation ref = (com.autonavi.amap.mapcore.animation.GLAlphaAnimation) getHEAP().get(refId);
            
                ref.mFromAlpha = new Double(mFromAlpha).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLAlphaAnimation::set_mToAlpha", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mToAlpha = (Double) ((Map<String, Object>) __args__).get("mToAlpha");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLAlphaAnimation ref = (com.autonavi.amap.mapcore.animation.GLAlphaAnimation) getHEAP().get(refId);
            
                ref.mToAlpha = new Double(mToAlpha).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLAlphaAnimation::set_mCurAlpha", (__args__, __methodResult__) -> {
                // jsonable arg
                Double mCurAlpha = (Double) ((Map<String, Object>) __args__).get("mCurAlpha");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLAlphaAnimation ref = (com.autonavi.amap.mapcore.animation.GLAlphaAnimation) getHEAP().get(refId);
            
                ref.mCurAlpha = new Double(mCurAlpha).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::set_x", (__args__, __methodResult__) -> {
                // jsonable arg
                double x = (double) ((Map<String, Object>) __args__).get("x");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                ref.x = x;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::set_y", (__args__, __methodResult__) -> {
                // jsonable arg
                double y = (double) ((Map<String, Object>) __args__).get("y");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                ref.y = y;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::set_alpha", (__args__, __methodResult__) -> {
                // jsonable arg
                double alpha = (double) ((Map<String, Object>) __args__).get("alpha");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                ref.alpha = alpha;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::set_rotate", (__args__, __methodResult__) -> {
                // jsonable arg
                double rotate = (double) ((Map<String, Object>) __args__).get("rotate");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                ref.rotate = rotate;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::set_scaleX", (__args__, __methodResult__) -> {
                // jsonable arg
                double scaleX = (double) ((Map<String, Object>) __args__).get("scaleX");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                ref.scaleX = scaleX;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLTransformation::set_scaleY", (__args__, __methodResult__) -> {
                // jsonable arg
                double scaleY = (double) ((Map<String, Object>) __args__).get("scaleY");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLTransformation ref = (com.autonavi.amap.mapcore.animation.GLTransformation) getHEAP().get(refId);
            
                ref.scaleY = scaleY;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.animation.GLEmergeAnimation::set_mStartPoint", (__args__, __methodResult__) -> {
                // ref arg
                com.amap.api.maps.model.LatLng mStartPoint = (com.amap.api.maps.model.LatLng) getHEAP().get((int) ((Map<String, Object>) __args__).get("mStartPoint"));
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.animation.GLEmergeAnimation ref = (com.autonavi.amap.mapcore.animation.GLEmergeAnimation) getHEAP().get(refId);
            
                ref.mStartPoint = mStartPoint;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.MapConfig::set_maxZoomLevel", (__args__, __methodResult__) -> {
                // jsonable arg
                Double maxZoomLevel = (Double) ((Map<String, Object>) __args__).get("maxZoomLevel");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                ref.maxZoomLevel = new Double(maxZoomLevel).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.MapConfig::set_minZoomLevel", (__args__, __methodResult__) -> {
                // jsonable arg
                Double minZoomLevel = (Double) ((Map<String, Object>) __args__).get("minZoomLevel");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.MapConfig ref = (com.autonavi.amap.mapcore.MapConfig) getHEAP().get(refId);
            
                ref.minZoomLevel = new Double(minZoomLevel).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.HoverGestureMapMessage::set_angleDelta", (__args__, __methodResult__) -> {
                // jsonable arg
                Double angleDelta = (Double) ((Map<String, Object>) __args__).get("angleDelta");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.HoverGestureMapMessage ref = (com.autonavi.amap.mapcore.message.HoverGestureMapMessage) getHEAP().get(refId);
            
                ref.angleDelta = new Double(angleDelta).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.MoveGestureMapMessage::set_touchDeltaX", (__args__, __methodResult__) -> {
                // jsonable arg
                Double touchDeltaX = (Double) ((Map<String, Object>) __args__).get("touchDeltaX");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.MoveGestureMapMessage ref = (com.autonavi.amap.mapcore.message.MoveGestureMapMessage) getHEAP().get(refId);
            
                ref.touchDeltaX = new Double(touchDeltaX).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.MoveGestureMapMessage::set_touchDeltaY", (__args__, __methodResult__) -> {
                // jsonable arg
                Double touchDeltaY = (Double) ((Map<String, Object>) __args__).get("touchDeltaY");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.MoveGestureMapMessage ref = (com.autonavi.amap.mapcore.message.MoveGestureMapMessage) getHEAP().get(refId);
            
                ref.touchDeltaY = new Double(touchDeltaY).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::set_scaleDelta", (__args__, __methodResult__) -> {
                // jsonable arg
                Double scaleDelta = (Double) ((Map<String, Object>) __args__).get("scaleDelta");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.ScaleGestureMapMessage ref = (com.autonavi.amap.mapcore.message.ScaleGestureMapMessage) getHEAP().get(refId);
            
                ref.scaleDelta = new Double(scaleDelta).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::set_pivotX", (__args__, __methodResult__) -> {
                // jsonable arg
                int pivotX = (int) ((Map<String, Object>) __args__).get("pivotX");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.ScaleGestureMapMessage ref = (com.autonavi.amap.mapcore.message.ScaleGestureMapMessage) getHEAP().get(refId);
            
                ref.pivotX = pivotX;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.ScaleGestureMapMessage::set_pivotY", (__args__, __methodResult__) -> {
                // jsonable arg
                int pivotY = (int) ((Map<String, Object>) __args__).get("pivotY");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.ScaleGestureMapMessage ref = (com.autonavi.amap.mapcore.message.ScaleGestureMapMessage) getHEAP().get(refId);
            
                ref.pivotY = pivotY;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_width", (__args__, __methodResult__) -> {
                // jsonable arg
                int width = (int) ((Map<String, Object>) __args__).get("width");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                ref.width = width;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_height", (__args__, __methodResult__) -> {
                // jsonable arg
                int height = (int) ((Map<String, Object>) __args__).get("height");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                ref.height = height;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_isGestureScaleByMapCenter", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean isGestureScaleByMapCenter = (boolean) ((Map<String, Object>) __args__).get("isGestureScaleByMapCenter");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                ref.isGestureScaleByMapCenter = isGestureScaleByMapCenter;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_isUseAnchor", (__args__, __methodResult__) -> {
                // jsonable arg
                boolean isUseAnchor = (boolean) ((Map<String, Object>) __args__).get("isUseAnchor");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                ref.isUseAnchor = isUseAnchor;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_anchorX", (__args__, __methodResult__) -> {
                // jsonable arg
                int anchorX = (int) ((Map<String, Object>) __args__).get("anchorX");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                ref.anchorX = anchorX;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.AbstractGestureMapMessage::set_anchorY", (__args__, __methodResult__) -> {
                // jsonable arg
                int anchorY = (int) ((Map<String, Object>) __args__).get("anchorY");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.AbstractGestureMapMessage ref = (com.autonavi.amap.mapcore.message.AbstractGestureMapMessage) getHEAP().get(refId);
            
                ref.anchorY = anchorY;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.RotateGestureMapMessage::set_pivotX", (__args__, __methodResult__) -> {
                // jsonable arg
                int pivotX = (int) ((Map<String, Object>) __args__).get("pivotX");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.RotateGestureMapMessage ref = (com.autonavi.amap.mapcore.message.RotateGestureMapMessage) getHEAP().get(refId);
            
                ref.pivotX = pivotX;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.RotateGestureMapMessage::set_pivotY", (__args__, __methodResult__) -> {
                // jsonable arg
                int pivotY = (int) ((Map<String, Object>) __args__).get("pivotY");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.RotateGestureMapMessage ref = (com.autonavi.amap.mapcore.message.RotateGestureMapMessage) getHEAP().get(refId);
            
                ref.pivotY = pivotY;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.message.RotateGestureMapMessage::set_angleDelta", (__args__, __methodResult__) -> {
                // jsonable arg
                Double angleDelta = (Double) ((Map<String, Object>) __args__).get("angleDelta");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.message.RotateGestureMapMessage ref = (com.autonavi.amap.mapcore.message.RotateGestureMapMessage) getHEAP().get(refId);
            
                ref.angleDelta = new Double(angleDelta).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.Rectangle::set_left", (__args__, __methodResult__) -> {
                // jsonable arg
                Double left = (Double) ((Map<String, Object>) __args__).get("left");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.Rectangle ref = (com.autonavi.amap.mapcore.Rectangle) getHEAP().get(refId);
            
                ref.left = new Double(left).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.Rectangle::set_right", (__args__, __methodResult__) -> {
                // jsonable arg
                Double right = (Double) ((Map<String, Object>) __args__).get("right");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.Rectangle ref = (com.autonavi.amap.mapcore.Rectangle) getHEAP().get(refId);
            
                ref.right = new Double(right).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.Rectangle::set_bottom", (__args__, __methodResult__) -> {
                // jsonable arg
                Double bottom = (Double) ((Map<String, Object>) __args__).get("bottom");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.Rectangle ref = (com.autonavi.amap.mapcore.Rectangle) getHEAP().get(refId);
            
                ref.bottom = new Double(bottom).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.Rectangle::set_top", (__args__, __methodResult__) -> {
                // jsonable arg
                Double top = (Double) ((Map<String, Object>) __args__).get("top");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.Rectangle ref = (com.autonavi.amap.mapcore.Rectangle) getHEAP().get(refId);
            
                ref.top = new Double(top).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.FPoint3::set_colorIndex", (__args__, __methodResult__) -> {
                // jsonable arg
                int colorIndex = (int) ((Map<String, Object>) __args__).get("colorIndex");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.FPoint3 ref = (com.autonavi.amap.mapcore.FPoint3) getHEAP().get(refId);
            
                ref.colorIndex = colorIndex;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_nowType", (__args__, __methodResult__) -> {
                // enum arg
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage.Type nowType = com.autonavi.amap.mapcore.AbstractCameraUpdateMessage.Type.values()[(int) ((Map<String, Object>) __args__).get("nowType")];
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                ref.nowType = nowType;
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_xPixel", (__args__, __methodResult__) -> {
                // jsonable arg
                Double xPixel = (Double) ((Map<String, Object>) __args__).get("xPixel");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                ref.xPixel = new Double(xPixel).floatValue();
                __methodResult__.success("success");
            });
            // setter
            put("com.autonavi.amap.mapcore.AbstractCameraUpdateMessage::set_yPixel", (__args__, __methodResult__) -> {
                // jsonable arg
                Double yPixel = (Double) ((Map<String, Object>) __args__).get("yPixel");
            
                int refId = (int) ((Map<String, Object>) __args__).get("refId");
                com.autonavi.amap.mapcore.AbstractCameraUpdateMessage ref = (com.autonavi.amap.mapcore.AbstractCameraUpdateMessage) getHEAP().get(refId);
            
                ref.yPixel = new Double(yPixel).floatValue();
                __methodResult__.success("success");
            });
        }};
    }
}
